# ðŸŒŸ Empowering Conversations with AI Chatbots

ðŸ”— *The journey of building an intelligent chatbot combines creativity, data preprocessing, and cutting-edge technology. Through a mix of data exploration, NLP techniques, and deep learning models, my teammates and I embarked on this fascinating project.*

## ðŸ›  Key Highlights

### Data Preparation:
- Loaded and cleaned data from various datasets:
  - [IT Helpdesk Chatbot Dataset](https://www.kaggle.com/datasets/it-helpdesk-chatbot-dataset/intents.json)
  - [Simple Chatbot Dataset](https://www.kaggle.com/datasets/simple-chatbot-dataset/intents.json)
  - [Computer Science Theory QA Dataset](https://www.kaggle.com/datasets/computer-science-theory-qa-dataset/intents.json)
  - [Chatbot Dataset by Mohammad Nourullahi](https://www.kaggle.com/mohammadnourullahi/chatbot-dataset/intents.json)
  - [Star Wars Chatbot Dataset](https://www.kaggle.com/star-wars-chat-bot/starwarsintents.json)
- Applied regex for preprocessing, tokenization, and lemmatization to optimize linguistic accuracy.

### Data Exploration:
- Utilized `pandas` for detailed dataset analysis to uncover patterns and insights.

### Visualization:
- Used `matplotlib` and `seaborn` to highlight data distributions and guide improvements.

### Model Design:
- Developed a TensorFlow/Keras model using embedding layers, LSTMs, and dense layers to interpret and respond effectively to user intents.

### Deployment:
- Built the chatbot interface with `Streamlit` to offer a seamless user experience.

## ðŸ’¡ Why This Project Stands Out:
This project emphasizes adaptability by:
- Cleaning patterns
- Removing duplicates
- Applying NLP techniques for semantic understanding

Integrating Streamlit ensures accessibility, moving beyond a simple backend solution.

## ðŸ”‘ Technologies Used:
- TensorFlow
- spaCy
- Streamlit
- pandas
- matplotlib
- seaborn

#AIChatbot #MachineLearning #NLP #DeepLearning #Streamlit #DataScience #PythonProgramming
